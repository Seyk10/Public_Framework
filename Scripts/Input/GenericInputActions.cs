//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MECS/Scripts/Input/GenericInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MECS.Input
{
    public partial class @GenericInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GenericInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GenericInputActions"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""7e2bec4d-7205-4035-8de3-ad95f274cbf4"",
            ""actions"": [
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""51cee990-9ed8-4435-8fb5-9a7ecde20e8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""058cbb79-84cf-4a1a-9268-c7f119add830"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""cd77f068-6230-4601-8950-1f549338a6ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""0c9fc016-dcd5-4109-b121-f2e3a4e80c48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""230646e0-967c-45bb-94fe-0f323d72445a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""ef68f355-0068-49f2-bb3b-b109fb757961"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd36e7ef-ac26-4e35-8530-ff51bcff030a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29cfe553-1759-4e7b-aa58-c343024b7b70"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""985d688c-f918-4055-8684-b8cd3f70a6f2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0234954-6bc1-442d-bac7-02948828b264"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea2b8d06-41a5-4a07-bb61-0485f5df7316"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b3c2b47-be4f-46d7-b8ae-77e19007e258"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""d22f2523-9629-4b91-ae36-8e73ce4b0fde"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""9dd8a8d8-c12a-4d5f-bc84-3a28fabaa090"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""33dc3789-cb9b-47a3-a399-d2c7f9adc48e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ca2e5339-2355-48f9-87a1-9c7c0b4fac89"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""72e8f85b-34a9-419d-bd41-d312cad28798"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35808dd8-7e98-4798-ac56-0426595bdb66"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ab93554-e454-4bfb-9c96-b040c21ebba5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""026d411a-1761-4cae-97e0-c813cfc9e799"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38d1c618-e696-485d-893e-2db0031d635e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_W = m_Keyboard.FindAction("W", throwIfNotFound: true);
            m_Keyboard_A = m_Keyboard.FindAction("A", throwIfNotFound: true);
            m_Keyboard_S = m_Keyboard.FindAction("S", throwIfNotFound: true);
            m_Keyboard_D = m_Keyboard.FindAction("D", throwIfNotFound: true);
            m_Keyboard_Space = m_Keyboard.FindAction("Space", throwIfNotFound: true);
            m_Keyboard_Esc = m_Keyboard.FindAction("Esc", throwIfNotFound: true);
            // Mouse
            m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
            m_Mouse_LeftClick = m_Mouse.FindAction("LeftClick", throwIfNotFound: true);
            m_Mouse_RightClick = m_Mouse.FindAction("RightClick", throwIfNotFound: true);
            m_Mouse_MousePosition = m_Mouse.FindAction("MousePosition", throwIfNotFound: true);
            m_Mouse_MouseDelta = m_Mouse.FindAction("MouseDelta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private IKeyboardActions m_KeyboardActionsCallbackInterface;
        private readonly InputAction m_Keyboard_W;
        private readonly InputAction m_Keyboard_A;
        private readonly InputAction m_Keyboard_S;
        private readonly InputAction m_Keyboard_D;
        private readonly InputAction m_Keyboard_Space;
        private readonly InputAction m_Keyboard_Esc;
        public struct KeyboardActions
        {
            private @GenericInputActions m_Wrapper;
            public KeyboardActions(@GenericInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @W => m_Wrapper.m_Keyboard_W;
            public InputAction @A => m_Wrapper.m_Keyboard_A;
            public InputAction @S => m_Wrapper.m_Keyboard_S;
            public InputAction @D => m_Wrapper.m_Keyboard_D;
            public InputAction @Space => m_Wrapper.m_Keyboard_Space;
            public InputAction @Esc => m_Wrapper.m_Keyboard_Esc;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void SetCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
                {
                    @W.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnW;
                    @W.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnW;
                    @W.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnW;
                    @A.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnA;
                    @A.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnA;
                    @A.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnA;
                    @S.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnS;
                    @S.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnS;
                    @S.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnS;
                    @D.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnD;
                    @D.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnD;
                    @D.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnD;
                    @Space.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpace;
                    @Space.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpace;
                    @Space.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpace;
                    @Esc.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEsc;
                    @Esc.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEsc;
                    @Esc.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEsc;
                }
                m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @W.started += instance.OnW;
                    @W.performed += instance.OnW;
                    @W.canceled += instance.OnW;
                    @A.started += instance.OnA;
                    @A.performed += instance.OnA;
                    @A.canceled += instance.OnA;
                    @S.started += instance.OnS;
                    @S.performed += instance.OnS;
                    @S.canceled += instance.OnS;
                    @D.started += instance.OnD;
                    @D.performed += instance.OnD;
                    @D.canceled += instance.OnD;
                    @Space.started += instance.OnSpace;
                    @Space.performed += instance.OnSpace;
                    @Space.canceled += instance.OnSpace;
                    @Esc.started += instance.OnEsc;
                    @Esc.performed += instance.OnEsc;
                    @Esc.canceled += instance.OnEsc;
                }
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);

        // Mouse
        private readonly InputActionMap m_Mouse;
        private IMouseActions m_MouseActionsCallbackInterface;
        private readonly InputAction m_Mouse_LeftClick;
        private readonly InputAction m_Mouse_RightClick;
        private readonly InputAction m_Mouse_MousePosition;
        private readonly InputAction m_Mouse_MouseDelta;
        public struct MouseActions
        {
            private @GenericInputActions m_Wrapper;
            public MouseActions(@GenericInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftClick => m_Wrapper.m_Mouse_LeftClick;
            public InputAction @RightClick => m_Wrapper.m_Mouse_RightClick;
            public InputAction @MousePosition => m_Wrapper.m_Mouse_MousePosition;
            public InputAction @MouseDelta => m_Wrapper.m_Mouse_MouseDelta;
            public InputActionMap Get() { return m_Wrapper.m_Mouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
            public void SetCallbacks(IMouseActions instance)
            {
                if (m_Wrapper.m_MouseActionsCallbackInterface != null)
                {
                    @LeftClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftClick;
                    @LeftClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftClick;
                    @LeftClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftClick;
                    @RightClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightClick;
                    @RightClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightClick;
                    @RightClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightClick;
                    @MousePosition.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                    @MousePosition.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                    @MousePosition.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                    @MouseDelta.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
                    @MouseDelta.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
                    @MouseDelta.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
                }
                m_Wrapper.m_MouseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LeftClick.started += instance.OnLeftClick;
                    @LeftClick.performed += instance.OnLeftClick;
                    @LeftClick.canceled += instance.OnLeftClick;
                    @RightClick.started += instance.OnRightClick;
                    @RightClick.performed += instance.OnRightClick;
                    @RightClick.canceled += instance.OnRightClick;
                    @MousePosition.started += instance.OnMousePosition;
                    @MousePosition.performed += instance.OnMousePosition;
                    @MousePosition.canceled += instance.OnMousePosition;
                    @MouseDelta.started += instance.OnMouseDelta;
                    @MouseDelta.performed += instance.OnMouseDelta;
                    @MouseDelta.canceled += instance.OnMouseDelta;
                }
            }
        }
        public MouseActions @Mouse => new MouseActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        public interface IKeyboardActions
        {
            void OnW(InputAction.CallbackContext context);
            void OnA(InputAction.CallbackContext context);
            void OnS(InputAction.CallbackContext context);
            void OnD(InputAction.CallbackContext context);
            void OnSpace(InputAction.CallbackContext context);
            void OnEsc(InputAction.CallbackContext context);
        }
        public interface IMouseActions
        {
            void OnLeftClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnMouseDelta(InputAction.CallbackContext context);
        }
    }
}
